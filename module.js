// Generated by IcedCoffeeScript 108.0.9
(function() {
  var Tokens, e, iced, log, r, t, token, _, __iced_deferrals, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  log = function() {
    var x;
    x = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    try {
      return console.log.apply(console, x);
    } catch (_error) {}
  };

  _ = require('wegweg')({
    globals: false,
    shelljs: false
  });

  module.exports = Tokens = (function() {
    function Tokens(opt) {
      var _base, _base1;
      this.opt = opt != null ? opt : {};
      if ((_base = this.opt).redis == null) {
        _base.redis = _.redis('localhost');
      }
      this.redis = this.opt.redis;
      if ((_base1 = this.opt).redis_key == null) {
        _base1.redis_key = 'issuetokens';
      }
    }

    Tokens.prototype.issue = function(opt, cb) {
      var e, key, token, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (!cb && _.type(opt) === 'function') {
        cb = opt;
        opt = {};
      }
      if (opt.expires_secs == null) {
        opt.expires_secs = _.seconds('5 minutes');
      }
      if (opt.value == null) {
        opt.value = _.time();
      }
      token = _.random_string(128);
      key = this.opt.redis_key + ':' + token;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/douglaslauer/www/issue-token/module.iced",
            funcname: "Tokens.issue"
          });
          _this.redis.setex(key, opt.expires_secs, opt.value, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return e = arguments[0];
              };
            })(),
            lineno: 26
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (e) {
            return cb(e);
          }
          return cb(null, token);
        };
      })(this));
    };

    Tokens.prototype.redeem = function(token, cb) {
      var e, key, r, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      key = this.opt.redis_key + ':' + token;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/douglaslauer/www/issue-token/module.iced",
            funcname: "Tokens.redeem"
          });
          _this.redis.get(key, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                e = arguments[0];
                return r = arguments[1];
              };
            })(),
            lineno: 34
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (e) {
            return cb(e);
          }
          if (!r) {
            return cb(new Error('Token does not exist'));
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/douglaslauer/www/issue-token/module.iced",
              funcname: "Tokens.redeem"
            });
            _this.redis.del(key, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return e = arguments[0];
                };
              })(),
              lineno: 39
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (e) {
              return cb(e);
            }
            return cb(null, r);
          });
        };
      })(this));
    };

    return Tokens;

  })();

  if (!module.parent) {
    log(/TESTING/);
    t = new Tokens;
    log(/ISSUE/);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          filename: "/Users/douglaslauer/www/issue-token/module.iced"
        });
        t.issue({
          expires_secs: 60,
          value: 'hello_world'
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              e = arguments[0];
              return token = arguments[1];
            };
          })(),
          lineno: 50
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        log(e);
        log(token);
        log(/REDEEM/);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            filename: "/Users/douglaslauer/www/issue-token/module.iced"
          });
          t.redeem(token, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                e = arguments[0];
                return r = arguments[1];
              };
            })(),
            lineno: 54
          }));
          __iced_deferrals._fulfill();
        })(function() {
          log(e);
          log(r);
          log(/REDEEM/);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              filename: "/Users/douglaslauer/www/issue-token/module.iced"
            });
            t.redeem(token, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  e = arguments[0];
                  return r = arguments[1];
                };
              })(),
              lineno: 58
            }));
            __iced_deferrals._fulfill();
          })(function() {
            log(e);
            return __iced_k(log(r));
          });
        });
      };
    })(this));
  } else {
    __iced_k();
  }

}).call(this);
